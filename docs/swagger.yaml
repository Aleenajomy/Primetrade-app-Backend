openapi: 3.0.3
info:
  title: Primetrade Task Management API
  description: |
    A comprehensive task management API with user authentication and CRUD operations.
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    `Authorization: Bearer <your-jwt-token>`
    
    ## Rate Limiting
    - 100 requests per 15 minutes per IP address
    
    ## Base URL
    - Development: `http://localhost:5000/api`
  version: 1.0.0
  contact:
    name: API Support
    email: support@primetrade.ai
  license:
    name: ISC
    
servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://your-production-domain.com/api
    description: Production server

tags:
  - name: Authentication
    description: User registration and login
  - name: User Profile
    description: User profile management
  - name: Tasks
    description: Task CRUD operations

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with name, email, and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              name: "John Doe"
              email: "john@example.com"
              password: "password123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: "john@example.com"
              password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - User Profile
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
            example:
              name: "John Smith"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      description: Retrieve all tasks for the authenticated user with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search tasks by title
          required: false
          schema:
            type: string
            example: "meeting"
        - name: status
          in: query
          description: Filter tasks by status
          required: false
          schema:
            type: string
            enum: [pending, in-progress, completed]
            example: "pending"
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Create a new task for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
            example:
              title: "Team Meeting"
              description: "Weekly team sync meeting"
              status: "pending"
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreateResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}:
    put:
      tags:
        - Tasks
      summary: Update a task
      description: Update an existing task for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
            example:
              title: "Updated Task Title"
              description: "Updated description"
              status: "completed"
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Delete an existing task for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    UserRegistration:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          description: User's password
          example: "password123"

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "john@example.com"
        password:
          type: string
          description: User's password
          example: "password123"

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 1
        name:
          type: string
          description: User's name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email
          example: "john@example.com"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00.000Z"

    UserProfileUpdate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          description: Updated user name
          example: "John Smith"

    Task:
      type: object
      properties:
        id:
          type: integer
          description: Task ID
          example: 1
        user_id:
          type: integer
          description: Owner user ID
          example: 1
        title:
          type: string
          description: Task title
          example: "Team Meeting"
        description:
          type: string
          nullable: true
          description: Task description
          example: "Weekly team sync meeting"
        status:
          type: string
          enum: [pending, in-progress, completed]
          description: Task status
          example: "pending"
        created_at:
          type: string
          format: date-time
          description: Task creation timestamp
          example: "2024-01-15T10:30:00.000Z"

    TaskCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          description: Task title
          example: "New Task"
        description:
          type: string
          nullable: true
          description: Task description
          example: "Task description"
        status:
          type: string
          enum: [pending, in-progress, completed]
          default: pending
          description: Task status
          example: "pending"

    TaskUpdate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          description: Updated task title
          example: "Updated Task"
        description:
          type: string
          nullable: true
          description: Updated task description
          example: "Updated description"
        status:
          type: string
          enum: [pending, in-progress, completed]
          description: Updated task status
          example: "completed"

    TaskCreateResponse:
      type: object
      properties:
        id:
          type: integer
          description: Created task ID
          example: 1
        title:
          type: string
          description: Task title
          example: "New Task"
        description:
          type: string
          nullable: true
          description: Task description
          example: "Task description"
        status:
          type: string
          description: Task status
          example: "pending"
        message:
          type: string
          description: Success message
          example: "Task created successfully"

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Login successful"
        token:
          type: string
          description: JWT authentication token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "john@example.com"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid credentials"
        errors:
          type: array
          description: Validation errors (when applicable)
          items:
            type: object
            properties:
              msg:
                type: string
                example: "Password must be at least 6 characters"
              param:
                type: string
                example: "password"
              location:
                type: string
                example: "body"